{"name": "Проверяем, что зарегистрированный пользователь может разместить заказ", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <Diplom_3.tests.test_main_function.TestMainFunction object at 0x10c697c10>\nfixture_get_driver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"7b33b546-1e87-4eb9-9a47-7a9cfa027fdc\")>\n\n    @allure.title('Проверяем, что зарегистрированный пользователь может разместить заказ')\n    def test_user_can_place_order(self, fixture_get_driver):\n        driver = fixture_get_driver\n        index_page = IndexPage(driver, index_url)\n        personal_account_page = PersonalAccountPage(driver, personal_account_url)\n    \n        index_page.p_open_index_page()\n    \n        index_page.p_click_personal_account_page()\n        personal_account_page.p_login_user()\n>       index_page.p_drag_and_drop_ingredient_to_basket()\n\ntests/test_main_function.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/index_page.py:64: in p_drag_and_drop_ingredient_to_basket\n    initial_counter, updated_counter = self.f_drag_and_drop_ingredient_to_basket(self.locators.BASKET_INGREDIENT, self.locators.BASKET, self.locators.COUNTER)\npages/base_page.py:104: in f_drag_and_drop_ingredient_to_basket\n    WebDriverWait(self.driver, 10).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"7b33b546-1e87-4eb9-9a47-7a9cfa027fdc\")>\nmethod = <function text_to_be_present_in_element.<locals>._predicate at 0x10c743060>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        ----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException"}, "steps": [{"name": "Открываем главную страницу", "status": "passed", "start": 1744472891459, "stop": 1744472892347}, {"name": "Кликаем на кнопку Личный кабинет", "status": "passed", "start": 1744472892347, "stop": 1744472892688}, {"name": "Переносим ингредиент в корзину", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \n\n", "trace": "  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/Users/misolka/Downloads/Diplom/Diplom_3/pages/index_page.py\", line 64, in p_drag_and_drop_ingredient_to_basket\n    initial_counter, updated_counter = self.f_drag_and_drop_ingredient_to_basket(self.locators.BASKET_INGREDIENT, self.locators.BASKET, self.locators.COUNTER)\n                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/misolka/Downloads/Diplom/Diplom_3/pages/base_page.py\", line 104, in f_drag_and_drop_ingredient_to_basket\n    WebDriverWait(self.driver, 10).until(\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/selenium/webdriver/support/wait.py\", line 146, in until\n    raise TimeoutException(message, screen, stacktrace)\n"}, "start": 1744472893114, "stop": 1744472903742}], "parameters": [{"name": "fixture_get_driver", "value": "'Firefox'"}], "start": 1744472891457, "stop": 1744472903744, "uuid": "bd3a6462-a420-4854-8d32-12d95717305a", "historyId": "1eaf9f1bbbacf449f05193bb81df8204", "testCaseId": "c75619c8a3450389e5bcdfcafb4e22d4", "fullName": "tests.test_main_function.TestMainFunction#test_user_can_place_order", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_main_function"}, {"name": "subSuite", "value": "TestMainFunction"}, {"name": "host", "value": "MacBook-Air-Alina.local"}, {"name": "thread", "value": "9501-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_main_function"}]}